// <auto-generated />
using System;
using AE.PID.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AE.PID.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241008075331_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("AE.PID.Server.Data.AppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhysicalFile")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppVersions");
                });

            modelBuilder.Entity("AE.PID.Server.Data.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryVersionEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LibraryVersionItemXmlId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryVersionEntityId");

                    b.ToTable("LibraryItem");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryVersions");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryVersionItemXML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FillStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryVersionItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterDocument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterElement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryVersionItemId")
                        .IsUnique();

                    b.ToTable("LibraryVersionItemXML");
                });

            modelBuilder.Entity("AE.PID.Server.Data.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("AE.PID.Server.Data.MasterContentSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FillStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterDocument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterElement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MasterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextStyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("MasterContentSnapshots");
                });

            modelBuilder.Entity("AE.PID.Server.Data.RepositorySnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RepositorySnapshots");
                });

            modelBuilder.Entity("AE.PID.Server.Data.Stencil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stencils");
                });

            modelBuilder.Entity("AE.PID.Server.Data.StencilSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhysicalFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StencilId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StencilId");

                    b.ToTable("StencilSnapshots");
                });

            modelBuilder.Entity("LibraryVersionRepositorySnapshot", b =>
                {
                    b.Property<int>("LibrarySnapshotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LibrarySnapshotsId", "VersionsId");

                    b.HasIndex("VersionsId");

                    b.ToTable("LibraryVersionRepositorySnapshot");
                });

            modelBuilder.Entity("MasterContentSnapshotStencilSnapshot", b =>
                {
                    b.Property<int>("MasterContentSnapshotsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StencilSnapshotsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MasterContentSnapshotsId", "StencilSnapshotsId");

                    b.HasIndex("StencilSnapshotsId");

                    b.ToTable("MasterContentSnapshotStencilSnapshot");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryItem", b =>
                {
                    b.HasOne("AE.PID.Server.Data.LibraryVersion", "LibraryVersion")
                        .WithMany("LibraryVersionItems")
                        .HasForeignKey("LibraryVersionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryVersion");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryVersion", b =>
                {
                    b.HasOne("AE.PID.Server.Data.Library", "Library")
                        .WithMany("Versions")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryVersionItemXML", b =>
                {
                    b.HasOne("AE.PID.Server.Data.LibraryItem", "LibraryItem")
                        .WithOne("LibraryVersionItemXML")
                        .HasForeignKey("AE.PID.Server.Data.LibraryVersionItemXML", "LibraryVersionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("AE.PID.Server.Data.MasterContentSnapshot", b =>
                {
                    b.HasOne("AE.PID.Server.Data.Master", "Master")
                        .WithMany("MasterContentSnapshots")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("AE.PID.Server.Data.StencilSnapshot", b =>
                {
                    b.HasOne("AE.PID.Server.Data.Stencil", "Stencil")
                        .WithMany("StencilSnapshots")
                        .HasForeignKey("StencilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stencil");
                });

            modelBuilder.Entity("LibraryVersionRepositorySnapshot", b =>
                {
                    b.HasOne("AE.PID.Server.Data.RepositorySnapshot", null)
                        .WithMany()
                        .HasForeignKey("LibrarySnapshotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AE.PID.Server.Data.LibraryVersion", null)
                        .WithMany()
                        .HasForeignKey("VersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterContentSnapshotStencilSnapshot", b =>
                {
                    b.HasOne("AE.PID.Server.Data.MasterContentSnapshot", null)
                        .WithMany()
                        .HasForeignKey("MasterContentSnapshotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AE.PID.Server.Data.StencilSnapshot", null)
                        .WithMany()
                        .HasForeignKey("StencilSnapshotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AE.PID.Server.Data.Library", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryItem", b =>
                {
                    b.Navigation("LibraryVersionItemXML")
                        .IsRequired();
                });

            modelBuilder.Entity("AE.PID.Server.Data.LibraryVersion", b =>
                {
                    b.Navigation("LibraryVersionItems");
                });

            modelBuilder.Entity("AE.PID.Server.Data.Master", b =>
                {
                    b.Navigation("MasterContentSnapshots");
                });

            modelBuilder.Entity("AE.PID.Server.Data.Stencil", b =>
                {
                    b.Navigation("StencilSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
